/*
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Result of validating a street address
 */
public class SwagNormalizeAddressResponse implements Swagger.MappedProperties {
    /**
     * True if the address is valid, false otherwise
     * @return validAddress
     */
    public Boolean validAddress { get; set; }

    /**
     * The name of the building, house or structure if applicable, such as "Cloudmersive Building 2".  This will often by null.
     * @return building
     */
    public String building { get; set; }

    /**
     * The street number or house number of the address.  For example, in the address "1600 Pennsylvania Avenue NW" the street number would be "1600".  This value will typically be populated for most addresses.
     * @return streetNumber
     */
    public String streetNumber { get; set; }

    /**
     * The name of the street or road of the address.  For example, in the address "1600 Pennsylvania Avenue NW" the street number would be "Pennsylvania Avenue NW".
     * @return street
     */
    public String street { get; set; }

    /**
     * The city of the address.
     * @return city
     */
    public String city { get; set; }

    /**
     * The state or province of the address.
     * @return stateOrProvince
     */
    public String stateOrProvince { get; set; }

    /**
     * The postal code or zip code of the address.
     * @return postalCode
     */
    public String postalCode { get; set; }

    /**
     * Country of the address, if present in the address.  If not included in the address it will be null.
     * @return countryFullName
     */
    public String countryFullName { get; set; }

    /**
     * Two-letter ISO 3166-1 country code
     * @return isOTwoLetterCode
     */
    public String isOTwoLetterCode { get; set; }

    /**
     * If the address is valid, the degrees latitude of the validated address, null otherwise
     * @return latitude
     */
    public Double latitude { get; set; }

    /**
     * If the address is valid, the degrees longitude of the validated address, null otherwise
     * @return longitude
     */
    public Double longitude { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'ValidAddress' => 'validAddress',
        'Building' => 'building',
        'StreetNumber' => 'streetNumber',
        'Street' => 'street',
        'City' => 'city',
        'StateOrProvince' => 'stateOrProvince',
        'PostalCode' => 'postalCode',
        'CountryFullName' => 'countryFullName',
        'ISOTwoLetterCode' => 'isOTwoLetterCode',
        'Latitude' => 'latitude',
        'Longitude' => 'longitude'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagNormalizeAddressResponse getExample() {
        SwagNormalizeAddressResponse normalizeAddressResponse = new SwagNormalizeAddressResponse();
        normalizeAddressResponse.validAddress = true;
        normalizeAddressResponse.building = 'aeiou';
        normalizeAddressResponse.streetNumber = 'aeiou';
        normalizeAddressResponse.street = 'aeiou';
        normalizeAddressResponse.city = 'aeiou';
        normalizeAddressResponse.stateOrProvince = 'aeiou';
        normalizeAddressResponse.postalCode = 'aeiou';
        normalizeAddressResponse.countryFullName = 'aeiou';
        normalizeAddressResponse.isOTwoLetterCode = 'aeiou';
        normalizeAddressResponse.latitude = 1.3579;
        normalizeAddressResponse.longitude = 1.3579;
        return normalizeAddressResponse;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagNormalizeAddressResponse) {
            SwagNormalizeAddressResponse normalizeAddressResponse = (SwagNormalizeAddressResponse) obj;
            return this.validAddress == normalizeAddressResponse.validAddress
                && this.building == normalizeAddressResponse.building
                && this.streetNumber == normalizeAddressResponse.streetNumber
                && this.street == normalizeAddressResponse.street
                && this.city == normalizeAddressResponse.city
                && this.stateOrProvince == normalizeAddressResponse.stateOrProvince
                && this.postalCode == normalizeAddressResponse.postalCode
                && this.countryFullName == normalizeAddressResponse.countryFullName
                && this.isOTwoLetterCode == normalizeAddressResponse.isOTwoLetterCode
                && this.latitude == normalizeAddressResponse.latitude
                && this.longitude == normalizeAddressResponse.longitude;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (validAddress == null ? 0 : System.hashCode(validAddress));
        hashCode = (17 * hashCode) + (building == null ? 0 : System.hashCode(building));
        hashCode = (17 * hashCode) + (streetNumber == null ? 0 : System.hashCode(streetNumber));
        hashCode = (17 * hashCode) + (street == null ? 0 : System.hashCode(street));
        hashCode = (17 * hashCode) + (city == null ? 0 : System.hashCode(city));
        hashCode = (17 * hashCode) + (stateOrProvince == null ? 0 : System.hashCode(stateOrProvince));
        hashCode = (17 * hashCode) + (postalCode == null ? 0 : System.hashCode(postalCode));
        hashCode = (17 * hashCode) + (countryFullName == null ? 0 : System.hashCode(countryFullName));
        hashCode = (17 * hashCode) + (isOTwoLetterCode == null ? 0 : System.hashCode(isOTwoLetterCode));
        hashCode = (17 * hashCode) + (latitude == null ? 0 : System.hashCode(latitude));
        hashCode = (17 * hashCode) + (longitude == null ? 0 : System.hashCode(longitude));
        return hashCode;
    }
}

