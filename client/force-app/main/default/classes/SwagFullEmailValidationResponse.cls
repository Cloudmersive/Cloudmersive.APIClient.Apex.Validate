/*
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Full email addresss validation result
 */
public class SwagFullEmailValidationResponse implements Swagger.MappedProperties {
    /**
     * True if the email address is valid overall, false otherwise
     * @return validAddress
     */
    public Boolean validAddress { get; set; }

    /**
     * Email server connected to for verification
     * @return mailServerUsedForValidation
     */
    public String mailServerUsedForValidation { get; set; }

    /**
     * True if the syntax of the email address is valid, false otherwise.  This is one component of ValidAddress, but not the only one.
     * @return validSyntax
     */
    public Boolean validSyntax { get; set; }

    /**
     * True if the domain name of the email address is valid, false otherwise.  This is one component of ValidAddress, but not the only one.
     * @return validDomain
     */
    public Boolean validDomain { get; set; }

    /**
     * True if the email address was verified by the remote server, false otherwise.  This is one component of ValidAddress, but not the only one.
     * @return validSMTP
     */
    public Boolean validSMTP { get; set; }

    /**
     * True if the domain is a catch-all domain name, false otherwise.  Catch-all domain names, while rare, always accept inbound email to ensure they do not lose any potentially useful emails.  Catch-all domain names can occassionally be configured to first accept and store all inbound email, but then later send a bounce email back to the sender after a delayed period of time.
     * @return isCatchallDomain
     */
    public Boolean isCatchallDomain { get; set; }

    /**
     * Domain name of the email address
     * @return domain
     */
    public String domain { get; set; }

    /**
     * True if the email domain name is a free provider (typically a free to sign up web email provider for consumers / personal use), false otherwise.
     * @return isFreeEmailProvider
     */
    public Boolean isFreeEmailProvider { get; set; }

    /**
     * True if the email address is a disposable email address, false otherwise; these disposable providers are not typically used to receive email and so will have a low likelihood of opening mail sent there.
     * @return isDisposable
     */
    public Boolean isDisposable { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'ValidAddress' => 'validAddress',
        'MailServerUsedForValidation' => 'mailServerUsedForValidation',
        'Valid_Syntax' => 'validSyntax',
        'Valid_Domain' => 'validDomain',
        'Valid_SMTP' => 'validSMTP',
        'IsCatchallDomain' => 'isCatchallDomain',
        'Domain' => 'domain',
        'IsFreeEmailProvider' => 'isFreeEmailProvider',
        'IsDisposable' => 'isDisposable'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagFullEmailValidationResponse getExample() {
        SwagFullEmailValidationResponse fullEmailValidationResponse = new SwagFullEmailValidationResponse();
        fullEmailValidationResponse.validAddress = true;
        fullEmailValidationResponse.mailServerUsedForValidation = 'aeiou';
        fullEmailValidationResponse.validSyntax = true;
        fullEmailValidationResponse.validDomain = true;
        fullEmailValidationResponse.validSMTP = true;
        fullEmailValidationResponse.isCatchallDomain = true;
        fullEmailValidationResponse.domain = 'aeiou';
        fullEmailValidationResponse.isFreeEmailProvider = true;
        fullEmailValidationResponse.isDisposable = true;
        return fullEmailValidationResponse;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagFullEmailValidationResponse) {
            SwagFullEmailValidationResponse fullEmailValidationResponse = (SwagFullEmailValidationResponse) obj;
            return this.validAddress == fullEmailValidationResponse.validAddress
                && this.mailServerUsedForValidation == fullEmailValidationResponse.mailServerUsedForValidation
                && this.validSyntax == fullEmailValidationResponse.validSyntax
                && this.validDomain == fullEmailValidationResponse.validDomain
                && this.validSMTP == fullEmailValidationResponse.validSMTP
                && this.isCatchallDomain == fullEmailValidationResponse.isCatchallDomain
                && this.domain == fullEmailValidationResponse.domain
                && this.isFreeEmailProvider == fullEmailValidationResponse.isFreeEmailProvider
                && this.isDisposable == fullEmailValidationResponse.isDisposable;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (validAddress == null ? 0 : System.hashCode(validAddress));
        hashCode = (17 * hashCode) + (mailServerUsedForValidation == null ? 0 : System.hashCode(mailServerUsedForValidation));
        hashCode = (17 * hashCode) + (validSyntax == null ? 0 : System.hashCode(validSyntax));
        hashCode = (17 * hashCode) + (validDomain == null ? 0 : System.hashCode(validDomain));
        hashCode = (17 * hashCode) + (validSMTP == null ? 0 : System.hashCode(validSMTP));
        hashCode = (17 * hashCode) + (isCatchallDomain == null ? 0 : System.hashCode(isCatchallDomain));
        hashCode = (17 * hashCode) + (domain == null ? 0 : System.hashCode(domain));
        hashCode = (17 * hashCode) + (isFreeEmailProvider == null ? 0 : System.hashCode(isFreeEmailProvider));
        hashCode = (17 * hashCode) + (isDisposable == null ? 0 : System.hashCode(isDisposable));
        return hashCode;
    }
}

