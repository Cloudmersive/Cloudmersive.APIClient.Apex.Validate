/*
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Result of parsing an address into its component parts
 */
public class SwagParseAddressResponse implements Swagger.MappedProperties {
    /**
     * True if the parsing operation was successful, false otherwise
     * @return successful
     */
    public Boolean successful { get; set; }

    /**
     * The name of the building, house or structure if applicable, such as "Cloudmersive Building 2".  This will often by null.
     * @return building
     */
    public String building { get; set; }

    /**
     * The street number or house number of the address.  For example, in the address "1600 Pennsylvania Avenue NW" the street number would be "1600".  This value will typically be populated for most addresses.
     * @return streetNumber
     */
    public String streetNumber { get; set; }

    /**
     * The name of the street or road of the address.  For example, in the address "1600 Pennsylvania Avenue NW" the street number would be "Pennsylvania Avenue NW".
     * @return street
     */
    public String street { get; set; }

    /**
     * The city of the address.
     * @return city
     */
    public String city { get; set; }

    /**
     * The state or province of the address.
     * @return stateOrProvince
     */
    public String stateOrProvince { get; set; }

    /**
     * The postal code or zip code of the address.
     * @return postalCode
     */
    public String postalCode { get; set; }

    /**
     * Country of the address, if present in the address.  If not included in the address it will be null.
     * @return countryFullName
     */
    public String countryFullName { get; set; }

    /**
     * Two-letter ISO 3166-1 country code
     * @return isOTwoLetterCode
     */
    public String isOTwoLetterCode { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Successful' => 'successful',
        'Building' => 'building',
        'StreetNumber' => 'streetNumber',
        'Street' => 'street',
        'City' => 'city',
        'StateOrProvince' => 'stateOrProvince',
        'PostalCode' => 'postalCode',
        'CountryFullName' => 'countryFullName',
        'ISOTwoLetterCode' => 'isOTwoLetterCode'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagParseAddressResponse getExample() {
        SwagParseAddressResponse parseAddressResponse = new SwagParseAddressResponse();
        parseAddressResponse.successful = true;
        parseAddressResponse.building = 'aeiou';
        parseAddressResponse.streetNumber = 'aeiou';
        parseAddressResponse.street = 'aeiou';
        parseAddressResponse.city = 'aeiou';
        parseAddressResponse.stateOrProvince = 'aeiou';
        parseAddressResponse.postalCode = 'aeiou';
        parseAddressResponse.countryFullName = 'aeiou';
        parseAddressResponse.isOTwoLetterCode = 'aeiou';
        return parseAddressResponse;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagParseAddressResponse) {
            SwagParseAddressResponse parseAddressResponse = (SwagParseAddressResponse) obj;
            return this.successful == parseAddressResponse.successful
                && this.building == parseAddressResponse.building
                && this.streetNumber == parseAddressResponse.streetNumber
                && this.street == parseAddressResponse.street
                && this.city == parseAddressResponse.city
                && this.stateOrProvince == parseAddressResponse.stateOrProvince
                && this.postalCode == parseAddressResponse.postalCode
                && this.countryFullName == parseAddressResponse.countryFullName
                && this.isOTwoLetterCode == parseAddressResponse.isOTwoLetterCode;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (successful == null ? 0 : System.hashCode(successful));
        hashCode = (17 * hashCode) + (building == null ? 0 : System.hashCode(building));
        hashCode = (17 * hashCode) + (streetNumber == null ? 0 : System.hashCode(streetNumber));
        hashCode = (17 * hashCode) + (street == null ? 0 : System.hashCode(street));
        hashCode = (17 * hashCode) + (city == null ? 0 : System.hashCode(city));
        hashCode = (17 * hashCode) + (stateOrProvince == null ? 0 : System.hashCode(stateOrProvince));
        hashCode = (17 * hashCode) + (postalCode == null ? 0 : System.hashCode(postalCode));
        hashCode = (17 * hashCode) + (countryFullName == null ? 0 : System.hashCode(countryFullName));
        hashCode = (17 * hashCode) + (isOTwoLetterCode == null ? 0 : System.hashCode(isOTwoLetterCode));
        return hashCode;
    }
}

