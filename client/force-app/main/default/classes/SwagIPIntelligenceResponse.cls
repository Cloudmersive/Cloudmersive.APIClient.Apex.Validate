/*
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * IP address intelligence result
 */
public class SwagIPIntelligenceResponse implements Swagger.MappedProperties {
    /**
     * True if the IP address is a known bot, otherwise false
     * @return isBot
     */
    public Boolean isBot { get; set; }

    /**
     * True if the IP address is a known Tor exit node, otherwise false
     * @return isTorNode
     */
    public Boolean isTorNode { get; set; }

    /**
     * True if the IP address is a known threat IP, otherwise false
     * @return isThreat
     */
    public Boolean isThreat { get; set; }

    /**
     * True if the IP address is in the European Union, otherwise false
     * @return isEU
     */
    public Boolean isEU { get; set; }

    /**
     * Returns the location of the IP address
     * @return location
     */
    public SwagGeolocateResponse location { get; set; }

    /**
     * ISO 4217 currency code for the IP address location
     * @return currencyCode
     */
    public String currencyCode { get; set; }

    /**
     * Name of the currency in English
     * @return currencyName
     */
    public String currencyName { get; set; }

    /**
     * Region (continent) in which the country is located; possible values are None, Europe, Americas, Asia, Africa, Oceania
     * @return regionArea
     */
    public String regionArea { get; set; }

    /**
     * Subregion in which the country is located; possible values are None, NorthernEurope, WesternEurope, SouthernEurope, EasternEurope, CentralAmerica, NorthernAmerica, SouthAmerica, EasternAfrica, MiddleAfrica, NorthernAfrica , SouthernAfrica , WesternAfrica , CentralAsia , EasternAsia , SouthernAsia , SouthEasternAsia , WesternAsia , Southern , Middle , AustraliaandNewZealand , Melanesia , Polynesia , Micronesia , Caribbean,
     * @return subregionArea
     */
    public String subregionArea { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'IsBot' => 'isBot',
        'IsTorNode' => 'isTorNode',
        'IsThreat' => 'isThreat',
        'IsEU' => 'isEU',
        'Location' => 'location',
        'CurrencyCode' => 'currencyCode',
        'CurrencyName' => 'currencyName',
        'RegionArea' => 'regionArea',
        'SubregionArea' => 'subregionArea'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagIPIntelligenceResponse getExample() {
        SwagIPIntelligenceResponse ipIntelligenceResponse = new SwagIPIntelligenceResponse();
        ipIntelligenceResponse.isBot = true;
        ipIntelligenceResponse.isTorNode = true;
        ipIntelligenceResponse.isThreat = true;
        ipIntelligenceResponse.isEU = true;
        ipIntelligenceResponse.location = SwagGeolocateResponse.getExample();
        ipIntelligenceResponse.currencyCode = 'aeiou';
        ipIntelligenceResponse.currencyName = 'aeiou';
        ipIntelligenceResponse.regionArea = 'aeiou';
        ipIntelligenceResponse.subregionArea = 'aeiou';
        return ipIntelligenceResponse;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagIPIntelligenceResponse) {
            SwagIPIntelligenceResponse ipIntelligenceResponse = (SwagIPIntelligenceResponse) obj;
            return this.isBot == ipIntelligenceResponse.isBot
                && this.isTorNode == ipIntelligenceResponse.isTorNode
                && this.isThreat == ipIntelligenceResponse.isThreat
                && this.isEU == ipIntelligenceResponse.isEU
                && this.location == ipIntelligenceResponse.location
                && this.currencyCode == ipIntelligenceResponse.currencyCode
                && this.currencyName == ipIntelligenceResponse.currencyName
                && this.regionArea == ipIntelligenceResponse.regionArea
                && this.subregionArea == ipIntelligenceResponse.subregionArea;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (isBot == null ? 0 : System.hashCode(isBot));
        hashCode = (17 * hashCode) + (isTorNode == null ? 0 : System.hashCode(isTorNode));
        hashCode = (17 * hashCode) + (isThreat == null ? 0 : System.hashCode(isThreat));
        hashCode = (17 * hashCode) + (isEU == null ? 0 : System.hashCode(isEU));
        hashCode = (17 * hashCode) + (location == null ? 0 : System.hashCode(location));
        hashCode = (17 * hashCode) + (currencyCode == null ? 0 : System.hashCode(currencyCode));
        hashCode = (17 * hashCode) + (currencyName == null ? 0 : System.hashCode(currencyName));
        hashCode = (17 * hashCode) + (regionArea == null ? 0 : System.hashCode(regionArea));
        hashCode = (17 * hashCode) + (subregionArea == null ? 0 : System.hashCode(subregionArea));
        return hashCode;
    }
}

