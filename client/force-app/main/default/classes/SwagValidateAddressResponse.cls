/*
 * validateapi
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Result of validating a street address
 */
public class SwagValidateAddressResponse implements Swagger.MappedProperties {
    /**
     * True if the address is valid, false otherwise
     * @return validAddress
     */
    public Boolean validAddress { get; set; }

    /**
     * If the address is valid, the degrees latitude of the validated address, null otherwise
     * @return latitude
     */
    public Double latitude { get; set; }

    /**
     * If the address is valid, the degrees longitude of the validated address, null otherwise
     * @return longitude
     */
    public Double longitude { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'ValidAddress' => 'validAddress',
        'Latitude' => 'latitude',
        'Longitude' => 'longitude'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagValidateAddressResponse getExample() {
        SwagValidateAddressResponse validateAddressResponse = new SwagValidateAddressResponse();
        validateAddressResponse.validAddress = true;
        validateAddressResponse.latitude = 1.3579;
        validateAddressResponse.longitude = 1.3579;
        return validateAddressResponse;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagValidateAddressResponse) {
            SwagValidateAddressResponse validateAddressResponse = (SwagValidateAddressResponse) obj;
            return this.validAddress == validateAddressResponse.validAddress
                && this.latitude == validateAddressResponse.latitude
                && this.longitude == validateAddressResponse.longitude;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (validAddress == null ? 0 : System.hashCode(validAddress));
        hashCode = (17 * hashCode) + (latitude == null ? 0 : System.hashCode(latitude));
        hashCode = (17 * hashCode) + (longitude == null ? 0 : System.hashCode(longitude));
        return hashCode;
    }
}

